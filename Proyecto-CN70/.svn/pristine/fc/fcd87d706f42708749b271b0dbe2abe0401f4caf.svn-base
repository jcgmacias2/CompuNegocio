using Aprovi.Data.Core;
using Aprovi.Data.Repositories;
using Aprovi.Business.ViewModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Aprovi.Business.Helpers;
using Aprovi.Data.Models;

namespace Aprovi.Business.Services
{
    public abstract class PedidoService : IPedidoService
    {
        private IUnitOfWork _UOW;
        private IPedidosRepository _orders;
        private IConfiguracionService _config;
        private IArticulosRepository _items;
        private IImpuestosRepository _taxes;
        
        public PedidoService(IUnitOfWork unitOfWork,  IConfiguracionService config)
        {
            _UOW = unitOfWork;
            _orders = _UOW.Pedidos;
            _config = config;
            _items = _UOW.Articulos;
            _taxes = _UOW.Impuestos;
        }

        public int Next()
        {
            try
            {
                return _orders.Next();
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int Last()
        {
            try
            {
                return _orders.Last();
            }
            catch (Exception)
            {
                throw;
            }
        }

        public virtual Pedido Add(VMPedido order)
        {
            try
            {
                //Obtengo una instancia de la configuración
                var config = _config.GetDefault();

                //Le asigno la empresa configurada
                order.idEmpresa = config.Estacion.idEmpresa;

                //Antes de registrarla obtengo nuevamente el folio, por si acaso ya se utilizo mientras agregaba los artículos
                order.folio = _orders.Next();

                //Le agrego estado
                order.idEstatusDePedido = (int)StatusDePedido.Registrado;

                //Guardo el pedido
                var local = order.ToPedido(_items);

                //Defaults de pedido
                local.Cliente = null;
                local.Usuario = null;

                //Ahora si guardo
                _orders.Add(local);
                _UOW.Save();

                return local;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public Pedido Find(int idOrder)
        {
            try
            {
                //Este debe pasarse como objecto
                return _orders.Find((object)idOrder);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public Pedido FindByFolio(int folio)
        {
            try
            {
                return _orders.Find(folio);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public List<Pedido> List()
        {
            try
            {
                return _orders.List().ToList();
            }
            catch (Exception)
            {
                throw;
            }
        }

        public List<Pedido> WithFolioOrClientLike(string value)
        {
            try
            {
                return _orders.WithFolioOrClientLike(value, null);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public Pedido Cancel(int idOrder, string reason)
        {
            try
            {
                var order = _orders.FindById(idOrder);
                //No puedo cancelar un pedido que este surtido
                if (order.idEstatusDePedido != (int)StatusDePedido.Registrado)
                    throw new Exception("No es posible cancelar un pedido surtido");

                order.idEstatusDePedido = (int)StatusDePedido.Cancelado;
                order.EstatusDePedido = null;
                order.CancelacionesDePedido = new CancelacionesDePedido();
                order.CancelacionesDePedido.fechaHora = DateTime.Now;
                order.CancelacionesDePedido.motivo = reason;

                _orders.Update(order);
                _UOW.Save();

                return order;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public Pedido Update(Pedido order, List<VMDetalleDePedido> detail)
        {
            try
            {
                //Se obtiene el pedido original
                var orderDb = _orders.Find((object)order.idPedido);

                if (orderDb.idEstatusDePedido != (int) StatusDePedido.Registrado)
                {
                    throw new Exception("No se pueden modificar pedidos surtidos o cancelados");
                }

                //Se determina si hubo cambios en el detalle
                var dbDetail = orderDb.DetallesDePedidoes.ToList();
                List<DetallesDePedido> removedItems = new List<DetallesDePedido>();
                List<DetallesDePedido> addedItems = new List<DetallesDePedido>();
                foreach (var d in dbDetail)
                {
                    decimal disccountedPrice = Math.Round(Operations.CalculatePriceWithDiscount(d.precioUnitario, d.descuento),2);
                    var detailItem = detail.FirstOrDefault(x=>x.idArticulo == d.idArticulo && Math.Round(x.PrecioUnitario,2) == disccountedPrice);

                    if (!detailItem.isValid())
                    {
                        //Se elimino el articulo del detalle
                        removedItems.Add(d);
                        continue;
                    }
                }

                foreach (var d in detail)
                {
                    var item = dbDetail.FirstOrDefault(x=>x.idArticulo == d.idArticulo && Math.Round(Operations.CalculatePriceWithDiscount(x.precioUnitario,x.descuento),2) == Math.Round(d.PrecioUnitario,2));
                    //Se buscan detalles nuevos

                    if (!item.isValid())
                    {
                        //Se agrego el articulo al detalle
                        addedItems.Add(d.ToDetalleDePedido());
                    }
                }

                //Ahora si se pueden efectuar los cambios a la entidad de EF
                removedItems.ForEach(x => _orders.DeleteDetail(x));
                addedItems.ForEach(x => orderDb.DetallesDePedidoes.Add(x));

                _UOW.Save();

                return orderDb;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public Pedido Update(Pedido order)
        {
            try
            {
                _orders.Update(order);
                _UOW.Save();

                return order;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public List<DetallesDePedido> PendingOrdersReport()
        {
            try
            {
                List<Pedido> orders = new List<Pedido>();

                orders.AddRange(_orders.WithStatus(StatusDePedido.Nuevo));
                orders.AddRange(_orders.WithStatus(StatusDePedido.Surtido_Parcial));

                return orders.SelectMany(x => x.DetallesDePedidoes).ToList();
            }
            catch (Exception)
            {
                throw;
            }
        }

        public List<DetallesDePedido> CustomerOrders(Cliente customer)
        {
            try
            {
                return _orders.WithCustomer(customer).OrderByDescending(x=>x.folio).SelectMany(x=>x.DetallesDePedidoes).ToList();
            }
            catch (Exception)
            {
                throw;
            }
        }
    }
}
